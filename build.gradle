buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.bmuschko:gradle-nexus-plugin:2.3.1'
    }
}

plugins {
    id "com.github.kt3k.coveralls" version "2.8.0"
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.4'
}

apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'maven'
apply plugin: 'idea'
apply plugin: 'jacoco'
apply plugin: 'checkstyle'

repositories {
    mavenCentral()
}

group = properties['project.group']
version = properties['project.version']
archivesBaseName = rootProject.name

sourceCompatibility = properties['project.compatibility']
targetCompatibility = properties['project.compatibility']

dependencies {

    testCompile("junit:junit:4.12")
    //for mocking
    testCompile("org.mockito:mockito-all:1.10.19")
    testRuntime("cglib:cglib-nodep:3.1")
    testRuntime("org.objenesis:objenesis:2.1")
}

jacocoTestReport {
    reports {
        xml.enabled true
        csv.enabled false
        html.destination "${buildDir}/reports/jacoco/test/"
    }
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

modifyPom {
    name 'RuleBook'
    description 'A simple, intuitive rules abstraction for Java'
    url 'https://github.com/Clayton7510/RuleBook'
    inceptionYear '2017'

    scm {
        url 'https://github.com/Clayton7510/RuleBook'
        connection 'scm:git:https://github.com/Clayton7510/RuleBook.git'
        developerConnection 'scm:git:https://github.com/Clayton7510/RuleBook.git'
    }

    licenses {
        license {
            name 'The Apache Software License, Version 2.0'
            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
            distribution 'repo'
        }
    }

    developers {
        developer {
            id 'Clayton7510'
            name 'Clayton Long'
            email 'Clayton7510@gmail.com'
        }
    }
}

nexus {
    sign = true
}

checkstyle {
    toolVersion = '6.7'
}

task checkstyleMainHtml << {
    ant.xslt(in: checkstyleMain.reports.xml.destination,
            style: file('./config/checkstyle/checkstyle.xsl'),
            out: new File("${buildDir}/reports/checkstyle", 'main.html'))
}

task checkstyleTestHtml << {
    ant.xslt(in: checkstyleTest.reports.xml.destination,
            style: file('./config/checkstyle/checkstyle.xsl'),
            out: new File("${buildDir}/reports/checkstyle", 'test.html'))
}
checkstyleMainHtml.dependsOn checkstyleMain
checkstyleTestHtml.dependsOn checkstyleTest
build.dependsOn jacocoTestReport, checkstyleMainHtml, checkstyleTestHtml
